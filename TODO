Framework:
  ✔ Adding a Core Folder/Namespace @done (15-12-19 21:55)
    It looks better that way :)
  ☐ Settings file
    Maybe using dot.env would be a good idea for this to ensure env
    independent settings. Default could still be set.
  ☐ Think about how to handle the main bootstrapping in index.php
    This could maybe done with an application class, which gets the
    matched route from the server as input and then, execute it
    Maybe somthing like app->run(); The current case statement should
    be put in here.
  ✔ Adding a class autoloader -> from php blog @done (15-12-19 21:56)
    I'm not sure where I should put the class loader exactly. Maybe that
    could also be a part of the app class mentioned above.
  ☐ Adding Framework constants, Version, Branch etc...
    That should be definitily done in a kidn of init file that gets included
    in the index file. Things like root and base path should also be in here

Requests & Routing:
  ✔ Kuro\Core\Http\Request @done (15-12-19 21:55)
    This should combine the $_GET and $_POST super globals and 'clean' them up
    a bit. E.g. if magic quotes is on, strip slashes should be added. More
    cleaning up would be done later in the specfic model validators
    ✔ Deciding if this class should be a global object or a static class @done (15-12-19 21:55)
      $request->get("array-key") vs. Request::get("array-key"). The static
      approach looks nicer to me in the first moment. But i need to decide
      that sometimes. 
  ✔ Update Kuro\Core\Routing\Router to newest code base @done (15-12-19 21:55)
    I need to update this class with the newest changes I made for my school
    project. But I need to update it to php7 again, which is no big deal.
  ☐ Add better parameter wildcard handling to the router
    It should be possible to specific the type (int, string, maybe even
    or ip) which the parameter must match. At the moment everything is
    getting matched. It should also be possible to specify multiple parameters.
  ☐ Adding a way to get URL to a specific route
    This could either be something like Route::to or Url::to() not sure
    at the moment.
  ☐ Kuro\Core\Routing\Redirect
    Copy this from php blog and update it to php7 syntax
  ☐ Add 'simulating' for HTTP Methods like PATCH, PUT & DELETE
    That way you are able to use it in forms and other requests. This ensures
    a correct HTTP Api.
  ✔ Add HTTP status handler @done (15-12-19 21:55)
    It should be possible to throw a http status code. Something like
    Http::status(404); -> That should call the specific http_response_code
    and print out some php -> <h1>404 - Page not found</h1>
  ✔ Adding support for / routes @done (15-12-19 21:55)
    At the moment to root route only works if you give an empty string
    

Sessions & Cookies:
  ☐ Kuro\Core\Session
    This should be a wrapper around the $_SESSION super global. The class
    should work kinda like this -> Session::get(), Session::set() and
    Session::has() are methods that should be implemented. Some other methods
    that would be handy -> unset(), start(), regenerate(). So it's actually
    a wrapper around most of the session functions.
  ☐ Kuro\Core\Cookie
    This should be created the same way like the session class. Maybe
    some extra features for deleting a cookie or something. Because cookies
    don't need to be started specifically it's goind less complex than
    the session class. Maybe implement cookie encrypting...

Database:
  ☐ Kuro\Core\Database\DatabaseConnection
    Should be realized with PDO, to ensure compatibility with different
    database drivers. It should also use prepared statements to be
    secured agains SQL-Injection attacks.
    ☐ Select method (only used to get data from the database)
    ☐ Insert/delete/update method (No result are getting back)
      To get those both methods to work there should be one private? query
      method which executes the query. Maybe one method is enough and simple
      enough?
  ☐ Kuro\Core\Database\Model
    The base model class. Either it should get the properties from the database
    or just map the ones that exists to the db result. The second way would be
    way simpler without many magic methods.
  ☐ Query Builder
    This ensures that all queries are consistent. Not quite sure how to
    implement this at the moment. Maybe a Query-Object that gets given to
    the Database->query() Method. This should be built upon the
    DatabaseConnection class.
  ☐ ORM
    That would be the next step when the model structure stands, but it will be
    pretty difficult to implement. A query builder would maybe a good idea...

Views:
  ☐ Kuro\Core\View
    The Main view class which handles the loading of the template files
    and let the programmer assign variables to it. I can copy this
    also from my php blog.
  ☐ Adding a folder for the views
    This folder should be somewhere in the root directory. Either called
    Views/ or Templates/.
  ☐ Implementing a simple templating engine
    Variables should be printed out like this {{var}} or {{!var }} to escape
    it. So it should work like in laravels engine. Not sure how about
    implementing parsing of control strucutres and loops.

Tests:
  ☐ Unit-Tests
    Create a way to tests the router -> Custom requests
    ✔ Get phpunit to work with php7 @done (15-12-23 00:57)
    ✔ Create test folder structure @done (15-12-23 00:57)
    ☐ Fixing constants in tests -> $_SERVER["SERVER_NAME"] -> set this is phpunit.php
    ☐ Read up a bit more about Mocking and other unit-testing stuff
    ☐ Writing the actual tests
    ☐ Setting up travis-ci for auto-testing on commits